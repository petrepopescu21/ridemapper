name: Deploy to Heroku

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '22'
  HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install client dependencies
        run: npm ci

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Type check client
        run: npm run type-check

      - name: Type check server
        run: cd server && npm run type-check

      - name: Run tests
        run: npm test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Build application
        env:
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            server/dist/
            server/client-dist/
          retention-days: 1

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [test, build]
    environment:
      name: production
      url: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for Heroku

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: server/

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.14.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ env.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
          buildpack: heroku/nodejs
          branch: main

      - name: Configure Heroku environment
        run: |
          # Install Heroku CLI
          curl https://cli-assets.heroku.com/install.sh | sh

          # Set config variables
          heroku config:set NODE_ENV=production --app=${{ env.HEROKU_APP_NAME }}
          heroku config:set HOST=0.0.0.0 --app=${{ env.HEROKU_APP_NAME }}
          heroku config:set CLIENT_URL=https://${{ env.HEROKU_APP_NAME }}.herokuapp.com --app=${{ env.HEROKU_APP_NAME }}
          heroku config:set VITE_GOOGLE_MAPS_API_KEY="${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}" --app=${{ env.HEROKU_APP_NAME }}

          # Check if Postgres addon is installed, if not install it
          heroku addons --app=${{ env.HEROKU_APP_NAME }} | grep heroku-postgresql || heroku addons:create heroku-postgresql:essential-0 --app=${{ env.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Run database migrations
        run: |
          # Wait for database to be ready
          sleep 10

          # Get DATABASE_URL from Heroku and run migrations
          export DATABASE_URL=$(heroku config:get DATABASE_URL --app=${{ env.HEROKU_APP_NAME }})
          echo "Database URL configured"

          # Generate Prisma client and run migrations
          cd server
          npx prisma migrate deploy
          npx prisma generate
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Health check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30

          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Get the actual app URL from Heroku
          echo "🔍 Getting app info from Heroku..."
          heroku apps:info --app=${{ env.HEROKU_APP_NAME }} || echo "Failed to get app info"

          APP_URL=$(heroku apps:info --app=${{ env.HEROKU_APP_NAME }} --json 2>/dev/null | jq -r '.app.web_url' 2>/dev/null)

          # Fallback to constructing URL if jq fails or returns null
          if [ "$APP_URL" == "null" ] || [ -z "$APP_URL" ] || [ "$APP_URL" == "" ]; then
            APP_URL="https://${{ env.HEROKU_APP_NAME }}.herokuapp.com"
            echo "⚠️  Using fallback URL construction"
          else
            echo "✅ Got URL from Heroku API"
          fi

          # Remove trailing slash if present
          APP_URL=${APP_URL%/}

          echo "🌐 Testing app at: ${APP_URL}"
          echo "📋 App name: ${{ env.HEROKU_APP_NAME }}"
          echo "🔍 Health endpoint: ${APP_URL}/health"

          # Try health check up to 5 times
          for i in {1..5}; do
            echo "⏳ Health check attempt $i..."
            
            if curl -f -s "${APP_URL}/health" > /tmp/health_response.json; then
              echo "✅ Health check passed!"
              echo "📊 Health response:"
              cat /tmp/health_response.json | jq '.' || cat /tmp/health_response.json
              echo ""
              echo "🌐 App is live at: ${APP_URL}"
              exit 0
            else
              echo "❌ Health check attempt $i failed"
              echo "🔍 Response details:"
              curl -s -w "HTTP Status: %{http_code}\nTotal time: %{time_total}s\n" "${APP_URL}/health" || echo "Request failed completely"
              echo ""
              
              if [ $i -lt 5 ]; then
                echo "⏳ Retrying in 15 seconds..."
                sleep 15
              fi
            fi
          done

          echo "❌ Health check failed after 5 attempts"
          echo "🔧 Check the logs with: heroku logs --tail --app=${{ env.HEROKU_APP_NAME }}"
          echo "🌐 Try accessing manually: ${APP_URL}"

          # Show recent logs for debugging
          echo "📝 Recent Heroku logs:"
          heroku logs --tail --num=50 --app=${{ env.HEROKU_APP_NAME }} || true

          exit 1
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Deployment summary
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📱 App: ${{ env.HEROKU_APP_NAME }}"
          echo "🌐 URL: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com"
          echo "🏥 Health: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/health"
          echo "📊 Logs: heroku logs --tail --app=${{ env.HEROKU_APP_NAME }}"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Deployment Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ RideMapper successfully deployed to Heroku!"
          echo "🌐 Live at: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com"

      - name: Deployment Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ RideMapper deployment to Heroku failed!"
          echo "📋 Check the workflow logs for details"
          echo "🔧 Manual deployment may be required"
