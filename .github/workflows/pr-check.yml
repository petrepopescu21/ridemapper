name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install client dependencies
        run: npm ci

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Type check client
        run: npm run type-check

      - name: Type check server
        run: cd server && npm run type-check

      - name: Run tests
        run: npm test

      - name: Test build (without API key)
        run: |
          VITE_GOOGLE_MAPS_API_KEY=dummy_key_for_build_test npm run build

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Audit client dependencies
        run: npm audit --audit-level moderate

      - name: Audit server dependencies
        run: cd server && npm audit --audit-level moderate

  comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            
            let status = '✅ All checks passed!';
            let details = '';
            
            if (needs.test?.result === 'failure') {
              status = '❌ Tests failed';
              details += '- 🧪 Tests or type checking failed\n';
            }
            
            if (needs.security?.result === 'failure') {
              status = '⚠️ Security issues found';
              details += '- 🔒 Security audit found vulnerabilities\n';
            }
            
            const body = `## 🚀 RideMapper PR Check Results

            ${status}

            ${details ? `### Issues Found:\n${details}` : '### ✨ Ready for deployment!'}

            ### Next Steps:
            ${details ? '- Fix the issues above before merging' : '- This PR can be safely merged to trigger automatic deployment'}
            - Merging to \`main\` will automatically deploy to Heroku
            - Monitor the deployment at the [Actions tab](${context.payload.repository.html_url}/actions)

            ---
            *This comment is automatically updated on each push*`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 RideMapper PR Check Results')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } 